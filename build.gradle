buildscript {
    repositories {
        maven { url "https://artifactory.homeword.cn/artifactory/libs-release" }
        maven { url "https://maven.aliyun.com/repository/central" }
        maven { url "https://maven.aliyun.com/repository/gradle-plugin" }
        mavenCentral()
        mavenLocal()
    }
}

plugins {
    id 'idea'
    id "io.spring.dependency-management" version "1.0.8.RELEASE"
    id "org.sonarqube" version "2.7.1"
    id "com.jfrog.artifactory" version "4.9.8"
    id "org.zeroturnaround.gradle.jrebel" version "1.1.8"
    id "com.google.protobuf" version "0.8.10"
}

ext {
    coreVersion = "0.4.16"
    protobufVersion = "3.8.0"
    grpcVersion = "1.23.0"
    springBootVersion = "2.1.4.RELEASE"
    kotlinVersion = "1.3.10"
    LIB_GRAPHQL_JAVA_VER = "12.0"
    MAPSTRUCT_VERSION = "1.3.0.Final"
}

group = 'net.whir.hos'
description = "内容管理"
version = System.getenv()['CI_BUILD_TAG']
status = 'integration'

repositories {
    maven { url "https://artifactory.homeword.cn/artifactory/libs-release" }
}

apply plugin: 'idea'
apply plugin: 'java'
apply plugin: 'com.jfrog.artifactory'
apply plugin: "jacoco"
apply plugin: 'com.google.protobuf'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'war'

gradle.taskGraph.whenReady {
    tasks.each { task ->
        if ("suty".equals(project.name)) {
            task.enabled = false
        } else if (task.name.contains("Proto")) {
            if (!["server", "security"].contains(project.name)) {
                task.enabled = false
            }
        }
    }
}

idea {
    module {
        outputDir file("$buildDir/classes/java/main")
        testOutputDir file("$buildDir/classes/java/test")
        inheritOutputDirs = false
    }
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

sourceSets {
    main {
        java {
            srcDir 'JavaSource'
        }
        resources {
            srcDir 'resources'
        }
        proto {
            srcDir 'proto'
            include '**/*.proto'
        }
    }
    test {
        java.srcDirs = ['test/src']
        resources.srcDirs = ["test/config"]
    }
}

protobuf {
    protoc {
        if (org.gradle.internal.os.OperatingSystem.current().isLinux()) {
            path = '/usr/local/bin/protoc'
        } else {
            artifact = "com.google.protobuf:protoc:${protobufVersion}"
        }
    }
    plugins {
        grpc {
            if (org.gradle.internal.os.OperatingSystem.current().isLinux()) {
                path = 'bin/protoc-gen-grpc-java-1.23.0-linux-x86_64.exe'
            } else {
                artifact = "io.grpc:protoc-gen-grpc-java"
            }
        }
    }

    generateProtoTasks {
        ofSourceSet('main').each { task ->
            task.builtins {
                java {
                    outputSubDir = 'java'
                }
            }
            task.plugins {
                grpc {
                    outputSubDir = 'java'
                }
            }
        }
    }
}

[compileJava, compileTestJava, javadoc]*.options*.encoding = 'UTF-8'

compileJava.dependsOn(processResources)

plugins.withId('java') {
    project.apply plugin: 'org.zeroturnaround.gradle.jrebel'
    def jarTask = project.tasks.findByName('jar')
    if (jarTask) {
        jarTask.dependsOn(generateRebel)
    }
    def warTask = project.tasks.findByName('war')
    if (warTask) {
        warTask.dependsOn(generateRebel)
    }
}

manifest {
    attributes 'provider': 'gradle'
}

dependencyManagement {
    imports {
        mavenBom("org.springframework.boot:spring-boot-dependencies:${springBootVersion}") {
            bomProperty("kotlin.version", "${kotlinVersion}")
        }
        mavenBom "io.grpc:grpc-bom:${grpcVersion}"
        mavenBom "com.google.protobuf:protobuf-bom:${protobufVersion}"
    }
    dependencies {
        dependency "org.jetbrains.kotlin:kotlin-stdlib:${kotlinVersion}"
    }
}

dependencies {
    compile("org.jfantasy:jfantasy-core:${coreVersion}") {
        exclude group: 'org.springframework.boot'
    }
    compile "org.jfantasy:jfantasy-storage:${coreVersion}"
    compile "org.jfantasy:jfantasy-graphql:${coreVersion}"
    compile "org.springframework.boot:spring-boot-starter-web"
    compile "org.springframework.boot:spring-boot-starter-quartz"
    compile "org.springframework.boot:spring-boot-starter-data-jpa"
    compile "org.springframework.boot:spring-boot-starter-actuator"
    compile 'net.devh:grpc-server-spring-boot-starter:2.5.1.RELEASE'
    compile 'org.mapstruct:mapstruct:1.3.0.Final'
    compileOnly 'org.projectlombok:lombok:1.18.8'
    annotationProcessor 'org.projectlombok:lombok:1.18.8'
    annotationProcessor 'org.mapstruct:mapstruct-processor:1.3.0.Final'
    testAnnotationProcessor 'org.mapstruct:mapstruct-processor:1.3.0.Final'
    annotationProcessor "org.springframework.boot:spring-boot-configuration-processor"
}

test {
    ignoreFailures = true

    jacoco {
        append = false
        destinationFile = file("$buildDir/jacoco/jacocoTest.exec")
        classDumpDir = file("$buildDir/jacoco/classpathdumps")
    }

}

sonarqube {
    properties {
        property "sonar.sourceEncoding", "UTF-8"
        property "sonar.links.ci", "http://gitlab.homeword.cn/ci"
        property "sonar.links.issue", "http://gitlab.homeword.cn/apis/framework/issues"
        property "sonar.links.scm", "http://gitlab.homeword.cn/apis/framework.git"
    }
}

configurations {
    published
}

task sourceJar(type: Jar) {
    from sourceSets.main.allSource
}

artifactoryPublish {
    dependsOn sourceJar
}

artifacts {
    published sourceJar
}


artifactory {
    contextUrl = System.getenv()['ARTIFACTORY_URL']
    publish {
        repository {
            repoKey = System.getenv()['MAVEN_REPO_KEY']
            username = System.getenv()['ARTIFACTORY_USER']
            password = System.getenv()['ARTIFACTORY_PASS']
        }
        defaults {
            publishConfigs('archives', 'published')
            publishPom = true
            publishIvy = false
        }
    }
    clientConfig.setIncludeEnvVars(true)
    clientConfig.setEnvVarsExcludePatterns('*password*,*secret*')
    clientConfig.info.setBuildNumber(System.getenv()['CI_JOB_ID'])
}
