buildscript {
    repositories {
        maven { url "https://artifactory.thuni-h.com/artifactory/libs-release" }
        maven { url "https://maven.aliyun.com/repository/central" }
        maven { url "https://maven.aliyun.com/repository/gradle-plugin" }
        mavenCentral()
        mavenLocal()
    }
}

plugins {
    id 'idea'
    id "io.spring.dependency-management" version "${PLUGIN_SPRING_DEPENDENCY_MANAGEMENT_VER}"
    id "com.jfrog.artifactory" version "${PLUGIN_ARTIFACTORY_VER}"
    id "org.zeroturnaround.gradle.jrebel" version "${PLUGIN_JREBEL_VER}"
    id "com.google.protobuf" version "${PLUGIN_PROTOBUF_VER}"
    id 'org.springframework.boot' version "${LIB_SPRING_BOOT_VER}"
}

group = 'com.thuni.his'
description = "演示项目"
version = System.getenv()['CI_BUILD_TAG']
status = 'integration'

repositories {
    maven { url "https://artifactory.thuni-h.com/artifactory/libs-release" }
}

apply plugin: 'idea'
apply plugin: 'java'
apply plugin: "jacoco"
apply plugin: 'com.google.protobuf'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'org.springframework.boot'

jar {
    manifest {
        attributes 'provider': 'gradle'
        attributes 'Main-Class': 'net.whir.hos.Application'
    }
}

idea {
    module {
        outputDir file("$buildDir/classes/java/main")
        testOutputDir file("$buildDir/classes/java/test")
        inheritOutputDirs = false
    }
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

protobuf {
    protoc {
        if (org.gradle.internal.os.OperatingSystem.current().isLinux()) {
            path = '/usr/local/bin/protoc'
        } else {
            artifact = "com.google.protobuf:protoc:${LIB_PROTOBUF_VER}"
        }
    }
    plugins {
        grpc {
            if (org.gradle.internal.os.OperatingSystem.current().isLinux()) {
                path = 'bin/protoc-gen-grpc-java-1.23.0-linux-x86_64.exe'
            } else {
                artifact = "io.grpc:protoc-gen-grpc-java"
            }
        }
    }

    generateProtoTasks {
        ofSourceSet('main').each { task ->
            task.builtins {
                java {
                    outputSubDir = 'java'
                }
            }
            task.plugins {
                grpc {
                    outputSubDir = 'java'
                }
            }
        }
    }
}

[compileJava, compileTestJava, javadoc]*.options*.encoding = 'UTF-8'

compileJava.dependsOn(processResources)

plugins.withId('java') {
    project.apply plugin: 'org.zeroturnaround.gradle.jrebel'
    def jarTask = project.tasks.findByName('jar')
    if (jarTask) {
        jarTask.dependsOn(generateRebel)
    }
    def warTask = project.tasks.findByName('war')
    if (warTask) {
        warTask.dependsOn(generateRebel)
    }
}

dependencyManagement {
    imports {
        mavenBom("org.springframework.boot:spring-boot-dependencies:${LIB_SPRING_BOOT_VER}")
        mavenBom "io.grpc:grpc-bom:${LIB_GRPC_VER}"
        mavenBom "com.google.protobuf:protobuf-bom:${LIB_PROTOBUF_VER}"
    }
}

dependencies {
    compile group: 'javax.interceptor', name: 'javax.interceptor-api', version: '1.2'
    compile 'org.mybatis:mybatis:3.4.0'
    compile 'log4j:log4j:1.2.17'
    compile 'org.apache.poi:poi:3.17'
    compile 'org.apache.poi:poi-ooxml:3.17'
    compile "org.jfantasy:jfantasy-core:$LIB_JFAN_VER"
    compile "org.jfantasy:jfantasy-graphql:$LIB_JFAN_VER"
    compile "net.devh:grpc-server-spring-boot-starter:${LIB_GRPC_SERVER_VER}"
    compile "org.mapstruct:mapstruct:${LIB_MAPSTRUCT_VER}"
    compileOnly "org.projectlombok:lombok:${LIB_LOMBOK_VER}"
    annotationProcessor "org.projectlombok:lombok:$LIB_LOMBOK_VER"
    annotationProcessor "org.mapstruct:mapstruct-processor:$LIB_MAPSTRUCT_VER"
    annotationProcessor "org.springframework.boot:spring-boot-configuration-processor:${LIB_SPRING_BOOT_VER}"
    testCompile "com.graphql-java-kickstart:graphql-spring-boot-starter-test:$LIB_GRAPHQL_VER"
    testCompileOnly "org.projectlombok:lombok:${LIB_LOMBOK_VER}"
    testAnnotationProcessor "org.projectlombok:lombok:$LIB_LOMBOK_VER"
    testAnnotationProcessor "org.mapstruct:mapstruct-processor:$LIB_MAPSTRUCT_VER"
    implementation("org.springframework:spring-web")
    implementation("org.springframework.boot:spring-boot-starter-test")
    implementation("com.fasterxml.jackson.core:jackson-databind")
    implementation("com.jayway.jsonpath:json-path")
    compileOnly("com.graphql-java:graphql-java:$LIB_GRAPHQL_JAVA_VER")
    compileOnly("com.graphql-java-kickstart:graphql-java-servlet:$LIB_GRAPHQL_SERVLET_VER")
    testImplementation("org.springframework.boot:spring-boot-starter-web")
}

task dev {
    bootRun.systemProperty 'spring.profiles.active', 'dev'
}

task copyDependencies(type: Sync) {
    from configurations.compileClasspath
    from configurations.compileOnly
    into 'build/dependencies'
}

jacocoTestReport {
    reports {
        xml.enabled true
        html.enabled false
        xml.destination file("${buildDir}/reports/Coverage.xml")
    }
}

test {
    useJUnitPlatform()

    ignoreFailures = true

    jacoco {
        destinationFile = file("$buildDir/jacoco/jacocoTest.exec")
        classDumpDir = file("$buildDir/jacoco/classpathdumps")
    }

}
