stages:
  - build
  - test
  - analysis
  - release
  - deploy

# 构建镜像
build:
  stage: build
  image: core.harbor.thuni-h.com/limaofeng/java-protoc:v2
  cache:
    paths:
      - .gradle/caches/
      - .gradle/wrapper/
  before_script:
    - export GRADLE_USER_HOME=$PWD/.gradle
  script:
    - ./gradlew clean build -x test
    - mv build/libs/*.jar build/app.jar
  artifacts:
    paths:
      - build
    expire_in: 7 days
  only:
    - merge_requests
    - branches
    - tags

sonarqube:
  stage: analysis
  image: core.harbor.thuni-h.com/limaofeng/gitlab-sonar-scanner
  dependencies:
    - build
  cache:
    paths:
      - .gradle/caches/
      - .gradle/wrapper/
  variables:
    GIT_DEPTH: 0
    SONAR_ANALYSIS_MODE: publish
    SONAR_BRANCH: $CI_COMMIT_REF_NAME
    SONAR_PROJECT_KEY: $CI_PROJECT_NAMESPACE:$CI_PROJECT_NAME
  script:
    - gitlab-sonar-scanner -Dsonar.qualitygate.wait=true
  only:
    - merge_requests
    - master
  allow_failure: true

# 构建镜像
release:
  stage: release
  dependencies:
    - build
  image: docker:latest
  services:
    - docker:dind
  variables:
    DOCKER_HOST: tcp://localhost:2375
    CI_REGISTRY_IMAGE: $CI_REGISTRY/$CI_PROJECT_NAMESPACE/${CI_PROJECT_NAME}
  before_script:
    - export CI_REGISTRY_TAG=$CI_BUILD_REF_NAME-${CI_BUILD_REF:0:8}
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - docker build --pull -f Dockerfile -t $CI_REGISTRY_IMAGE:$CI_REGISTRY_TAG .
    - docker tag $CI_REGISTRY_IMAGE:$CI_REGISTRY_TAG $CI_REGISTRY_IMAGE:latest
    - docker push $CI_REGISTRY_IMAGE:$CI_REGISTRY_TAG
    - docker push $CI_REGISTRY_IMAGE:latest
    - docker rmi $CI_REGISTRY_IMAGE:$CI_REGISTRY_TAG
    - docker rmi $CI_REGISTRY_IMAGE:latest
  when: manual
  only:
    - master
    - tags
